import de.thb.fim.pizzaPronto.datenobjekte.Geschlecht;import de.thb.fim.pizzaPronto.datenobjekte.KundeVO;import de.thb.fim.pizzaPronto.datenobjekte.PizzaVO;import de.thb.fim.pizzaPronto.datenobjekte.SpeiseKarte;import de.thb.fim.pizzaPronto.logik.Angestellter;import de.thb.fim.pizzaPronto.logik.Bestellung;import de.thb.fim.pizzaPronto.logik.Koch;import de.thb.fim.pizzaPronto.logik.Lieferant;import org.junit.BeforeClass;import org.junit.Test;import java.lang.reflect.Field;import java.time.LocalDate;import java.time.LocalDateTime;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;/** * Aerzte und stelleDiagnose wird getestet. *  * Voraussetzung Messung und SchlaflaborMessung sind ok *  * Zum Testen werden spezielle Assert-Befehle eingesetzt <br> *  * @author Gabriele Schmidt * @version 1.0 11.05.2015 */public class JUnitTestAngestellteArbeitenBestellung {	private static Class<Bestellung> myBestellungClass;	private static Bestellung myBestellung;	private static Angestellter[] angestellte = new Angestellter[2];	private static KundeVO kunde;	private static SpeiseKarte speisekarte;	private static Field warenkorb;	@BeforeClass	public static void setUpBeforeClass() throws Exception {		// de.thb.fim.pizzaPronto.logik.Koch erstellen		angestellte[0] = new Koch("Bocuse", "Bruno", "Schlemmerweg", 13,				"Koch007");		// de.thb.fim.pizzaPronto.logik.Lieferant erstellen		angestellte[1] = new Lieferant("Rasender", "Rudi", "Schnellstra�e",				200, "Lieferant01");		// Kunde		kunde = new KundeVO("Genuss", "Gini", "Haribostraße", 32, Geschlecht.W,				LocalDate.of(1995, 8, 8), null);		myBestellung = new Bestellung(LocalDateTime.now(), kunde);		speisekarte = new SpeiseKarte();		myBestellungClass = Bestellung.class;		warenkorb = myBestellungClass.getDeclaredField("warenkorb");	}	@Test	public void testBestellungWarenkorbDatentyp() {		assertTrue("Warenkorb in de.thb.fim.pizzaPronto.logik.Bestellung ist Array und vom Typ de.thb.fim.pizzaPronto.datenobjekte.GerichtVO",				warenkorb.getType().toString().equals("class [LGerichtVO;"));	}	@Test	public void testBestellungStatusAufgegeben() {		myBestellung = new Bestellung(LocalDateTime.now(), kunde);		assertEquals("Bestellungsstatus nach Objekterzeugung ist aufgegeben",				"aufgegeben", myBestellung.getStatus());	}	@Test	public void testBestellungHinzufuegenGericht() {		myBestellung = new Bestellung(LocalDateTime.now(), kunde);		// Ein Gericht der de.thb.fim.pizzaPronto.datenobjekte.SpeiseKarte hinzuf�gen		myBestellung.hinzufuegenGericht(speisekarte.getGericht(0));		assertEquals("Anzahl der Gerichte in de.thb.fim.pizzaPronto.logik.Bestellung: 1", 1,				myBestellung.getAnzGerichte());	}	@Test	public void testBestellungHinzufuegenZuVieleGerichte() {		myBestellung = new Bestellung(LocalDateTime.now(), kunde);		// Alle 18 Gerichte der de.thb.fim.pizzaPronto.datenobjekte.SpeiseKarte hinzuf�gen		for (int i = 0; i <  Bestellung.getMAX_GERICHTE(); i++) {			myBestellung.hinzufuegenGericht(speisekarte.getGericht(i % speisekarte.getAnzGerichte()));		}		assertEquals("Anzahl der Gerichte in de.thb.fim.pizzaPronto.logik.Bestellung: MAX_GERICHTE",				Bestellung.getMAX_GERICHTE(), myBestellung.getAnzGerichte());		myBestellung.hinzufuegenGericht(speisekarte.getGericht(0));			assertEquals(					"Index in de.thb.fim.pizzaPronto.logik.Bestellung gleich der Anzahl der Gerichte",					myBestellung.getAnzGerichte(), myBestellung.getIndex());		}		@Test	public void testBestellungHinzufuegenAlleGerichte() {		myBestellung = new Bestellung(LocalDateTime.now(), kunde);		// Alle 18 Gerichte der de.thb.fim.pizzaPronto.datenobjekte.SpeiseKarte hinzuf�gen		for (int i = 0; i < speisekarte.getAnzGerichte(); i++) {			myBestellung.hinzufuegenGericht(speisekarte.getGericht(i));		}		assertEquals("Anzahl der Gerichte in de.thb.fim.pizzaPronto.logik.Bestellung: MAX_GERICHTE",				Bestellung.getMAX_GERICHTE(), myBestellung.getAnzGerichte());		for (int i = 0; i < myBestellung.getAnzGerichte(); i++) {			assertEquals(					"Gerichte in de.thb.fim.pizzaPronto.logik.Bestellung gleich der ersten 10 Gerichte auf de.thb.fim.pizzaPronto.datenobjekte.SpeiseKarte",					myBestellung.getGericht(i), speisekarte.getGericht(i));		}	}	@Test	public void testBestellungberechenGesamtPreis() {		float preis = 7.00f;		myBestellung = new Bestellung(LocalDateTime.now(), kunde);		// Alle 18 Gerichte der de.thb.fim.pizzaPronto.datenobjekte.SpeiseKarte hinzuf�gen		for (int i = 0; i < Bestellung.getMAX_GERICHTE(); i++) {			myBestellung.hinzufuegenGericht(new PizzaVO(30, "Popeye",					new String[] { "Schinken", "Spinat", "Champignon", "Ei" },					preis, 1));		}		assertTrue("Gesamtpreis wird korrekt berechnet ",				(preis * Bestellung.getMAX_GERICHTE()) == myBestellung						.berechneGesamtPreis());	}	@Test	public void testBestellungloescheLetztesGericht() {		int index;		myBestellung = new Bestellung(LocalDateTime.now(), kunde);		index = myBestellung.getIndex();		myBestellung.hinzufuegenGericht(speisekarte.getGericht(0));		myBestellung.loescheLetztesGericht();		assertEquals(				"Nach Methode loescheLetztesGericht() in de.thb.fim.pizzaPronto.logik.Bestellung ist Index erniedrigt",				index, myBestellung.getIndex());	}	public void testLoescheLetztesGerichtZuViel() {		int index;		myBestellung = new Bestellung(LocalDateTime.now(), kunde);		index = myBestellung.getIndex();		assertEquals(" Index ist 0", index, 0);		myBestellung.loescheLetztesGericht();		assertEquals(				"Nach Methode loescheLetztesGericht() in de.thb.fim.pizzaPronto.logik.Bestellung ohne, dass ein Gericht da war, ist Index immer noch 0",				index, myBestellung.getIndex());	}	@Test	public void testAngestellteArbeitenFuerOhneBestellung() {		assertTrue(				"ArbeitenFuer de.thb.fim.pizzaPronto.logik.Koch: Keine de.thb.fim.pizzaPronto.logik.Bestellung vorhanden",				angestellte[0].arbeitetFuerKunde(kunde).contains(						"Keine de.thb.fim.pizzaPronto.logik.Bestellung vorhanden"));		assertTrue(				"ArbeitenFuer de.thb.fim.pizzaPronto.logik.Lieferant: Keine de.thb.fim.pizzaPronto.logik.Bestellung vorhanden",				angestellte[1].arbeitetFuerKunde(kunde).contains(						"Keine de.thb.fim.pizzaPronto.logik.Bestellung vorhanden"));	}	@Test	public void testAngestellteArbeitenFuerPersonalnummer() {		assertTrue(				"ArbeitenFuer de.thb.fim.pizzaPronto.logik.Koch: Personalnummer in Ausgabe",				angestellte[0].arbeitetFuerKunde(kunde).contains(						angestellte[0].getPersonalNummer()));		assertTrue(				"ArbeitenFuer de.thb.fim.pizzaPronto.logik.Lieferant: Personalnummer in Ausgabe",				angestellte[1].arbeitetFuerKunde(kunde).contains(						angestellte[1].getPersonalNummer()));	}	@Test	public void testAngestellteArbeitenFuerOhneKunde() {		assertTrue(				"ArbeitenFuer ohne Kunde de.thb.fim.pizzaPronto.logik.Koch: Keine de.thb.fim.pizzaPronto.logik.Bestellung vorhanden",				angestellte[0].arbeitetFuerKunde(null).contains(						"Keine de.thb.fim.pizzaPronto.logik.Bestellung vorhanden"));		assertTrue(				"ArbeitenFuer ohne Kunde de.thb.fim.pizzaPronto.logik.Lieferant: keine de.thb.fim.pizzaPronto.logik.Bestellung vorhanden",				angestellte[1].arbeitetFuerKunde(null).contains(						"Keine de.thb.fim.pizzaPronto.logik.Bestellung vorhanden"));	}	@Test	public void testKochArbeitenBestellungAufgegeben() {		myBestellung = new Bestellung(LocalDateTime.now(), kunde);		kunde.setBestellung(myBestellung);		myBestellung.setStatus("aufgegeben");		assertTrue("de.thb.fim.pizzaPronto.logik.Koch arbeitet: de.thb.fim.pizzaPronto.logik.Bestellung fertig", angestellte[0]				.arbeitetFuerKunde(kunde).contains("de.thb.fim.pizzaPronto.logik.Bestellung fertig"));		assertEquals("Bestellungsstatus nach de.thb.fim.pizzaPronto.logik.Koch arbeitet", "fertig",				myBestellung.getStatus());	}	@Test	public void testKochArbeitenBestellungFertig() {		myBestellung = new Bestellung(LocalDateTime.now(), kunde);		kunde.setBestellung(myBestellung);		myBestellung.setStatus("fertig");		assertTrue(				"de.thb.fim.pizzaPronto.logik.Koch arbeitet: Keine de.thb.fim.pizzaPronto.logik.Bestellung zum Abarbeiten",				angestellte[0].arbeitetFuerKunde(kunde).contains(						"Keine de.thb.fim.pizzaPronto.logik.Bestellung zum Abarbeiten"));		assertEquals("Bestellungsstatus immer noch fertig", "fertig",				myBestellung.getStatus());	}	@Test	public void testKochArbeitenBestellungAusgeliefert() {		myBestellung = new Bestellung(LocalDateTime.now(), kunde);		kunde.setBestellung(myBestellung);		myBestellung.setStatus("ausgeliefert");		assertTrue(				"de.thb.fim.pizzaPronto.logik.Koch arbeitet: Keine de.thb.fim.pizzaPronto.logik.Bestellung zum Abarbeiten",				angestellte[0].arbeitetFuerKunde(kunde).contains(						"Keine de.thb.fim.pizzaPronto.logik.Bestellung zum Abarbeiten"));	}	@Test	public void testLieferantArbeitenBestellungAufgegeben() {		myBestellung = new Bestellung(LocalDateTime.now(), kunde);		kunde.setBestellung(myBestellung);		myBestellung.setStatus("aufgegeben");		assertTrue(				"de.thb.fim.pizzaPronto.logik.Lieferant arbeitet:  Keine de.thb.fim.pizzaPronto.logik.Bestellung zum Abarbeiten",				angestellte[1].arbeitetFuerKunde(kunde).contains(						"Keine de.thb.fim.pizzaPronto.logik.Bestellung zum Abarbeiten"));		assertEquals("Bestellungsstatus immer noch aufgegeben", "aufgegeben",				myBestellung.getStatus());	}	@Test	public void testLieferantArbeitenBestellungFertig() {		myBestellung = new Bestellung(LocalDateTime.now(), kunde);		kunde.setBestellung(myBestellung);		myBestellung.setStatus("fertig");		System.out.println(myBestellung.getZeitstempelAuslieferung());		assertTrue("de.thb.fim.pizzaPronto.logik.Bestellung Zeitstempel Auslieferung vorher null",				myBestellung.getZeitstempelAuslieferung() == null);		assertTrue("de.thb.fim.pizzaPronto.logik.Lieferant arbeitet: de.thb.fim.pizzaPronto.logik.Bestellung fertig um", angestellte[1]				.arbeitetFuerKunde(kunde).contains("de.thb.fim.pizzaPronto.logik.Bestellung fertig um"));		assertEquals("Bestellungsstatus ausgeliefert", "ausgeliefert",				myBestellung.getStatus());		assertTrue("de.thb.fim.pizzaPronto.logik.Bestellung Zeitstempel Auslieferung vorhanden",				myBestellung.getZeitstempelAuslieferung() != null);	}	@Test	public void testLieferantArbeitenBestellungAusgeliefert() {		myBestellung = new Bestellung(LocalDateTime.now(), kunde);		kunde.setBestellung(myBestellung);		myBestellung.setStatus("ausgeliefert");		assertTrue(				"de.thb.fim.pizzaPronto.logik.Lieferant arbeitet: Keine de.thb.fim.pizzaPronto.logik.Bestellung zum Abarbeiten",				angestellte[1].arbeitetFuerKunde(kunde).contains(						"Keine de.thb.fim.pizzaPronto.logik.Bestellung zum Abarbeiten"));	}}