import java.lang.reflect.Method;import java.lang.reflect.Modifier;import org.junit.BeforeClass;import org.junit.Test;import static org.junit.Assert.*;/** * Die Vererbungshierarchien werden getestet. *  * Zum Testen werden spezielle Assert-Befehle und die Reflection-API eingesetzt <br> *  * @author Gabriele Schmidt * @version 1.0 11.05.2015 */public class JUnitTestVererbungshierachien {		private static Class<PersonVO> myPersonVOClass;	private static int modifiersPersonVO; 	private static Class<Angestellter> myAngestellterClass;	private static int modifiersAngestellter; 		private static  Angestellter koch;		private static Method arbeiten;	private static int modifiersArbeiten;		private static Class<GerichtVO> myGerichtVOClass;	private static int modifiersGerichtVO; 		private static  GerichtVO dessert;		private static Method getGerichtName;	private static int modifiersgetGerichtName;	private static Method getGerichtNummer;	private static int modifiersgetGerichtNummer;	private static Method getName;	private static int modifiersgetName;	private static Method getNummer;	private static int modifiersgetNummer;		@BeforeClass	public static void setUpBeforeClass() throws Exception {		myAngestellterClass = Angestellter.class;		modifiersAngestellter= myAngestellterClass.getModifiers();				myPersonVOClass = PersonVO.class;				modifiersPersonVO = myPersonVOClass.getModifiers();				koch = new Koch();				arbeiten = myAngestellterClass.getMethod( "arbeiten" );		modifiersArbeiten = arbeiten.getModifiers();				myGerichtVOClass = GerichtVO.class;		modifiersGerichtVO= myGerichtVOClass .getModifiers();				dessert = new DessertVO();				getGerichtName = myGerichtVOClass.getMethod( "getGerichtName" );		modifiersgetGerichtName = getGerichtName.getModifiers();				getGerichtNummer = myGerichtVOClass.getMethod( "getGerichtNummer" );		modifiersgetGerichtNummer = getGerichtNummer.getModifiers();				getName = myGerichtVOClass.getMethod( "getName" );		modifiersgetName = getName.getModifiers();				getNummer = myGerichtVOClass.getMethod( "getNummer" );		modifiersgetNummer = getNummer.getModifiers();	}		@Test	public void isabstractPersonVO() {		assertTrue("PersonVO ist abstract", Modifier.isAbstract(modifiersPersonVO));	}		@Test	public void isabstractAngestellter() {			assertTrue("Angestellter ist abstract", Modifier.isAbstract(modifiersAngestellter) );	}		@Test	public void testAngestellterOberklassePersonVO() {		assertTrue("Angestellter ist eine PersonVO",myAngestellterClass.getSuperclass().toString().equals("class PersonVO"));	}			@Test	public void isabstractArbeiten() {			assertTrue("Methode arbeiten ist abstract", Modifier.isAbstract(modifiersArbeiten));	}		@Test	public void testKochOberklassen() {		assertTrue("Koch ist ein Koch", koch instanceof Koch);		assertTrue("Koch ist eine Angestellter", koch instanceof Angestellter);		assertTrue("Koch ist eine PersonVO", koch instanceof PersonVO);	}		@Test	public void isabstractGerichtVO() {			assertTrue("GerichtVO ist abstract", Modifier.isAbstract(modifiersGerichtVO) );	}				@Test	public void isabstractGetGerichtName() {			assertTrue("Methode getGerichtName ist abstract", Modifier.isAbstract(modifiersgetGerichtName));	}		@Test	public void isabstractGetGerichtNummer() {			assertTrue("Methode getGerichtNummer ist abstract", Modifier.isAbstract(modifiersgetGerichtNummer));	}	@Test	public void isNotabstractGetName() {			assertFalse("Methode getName ist nicht abstract", Modifier.isAbstract(modifiersgetName));	}		@Test	public void isNotabstractGetNummer() {			assertFalse("Methode getNummer ist nicht abstract", Modifier.isAbstract(modifiersgetNummer));	}		@Test	public void testDessertVOOberklasse() {		assertTrue("DessertVO ist ein DessertVO", dessert instanceof DessertVO);		assertTrue("DessertVO ist eine GerichtVO", dessert instanceof GerichtVO);	}	}